# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import file_pb2 as file__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in file_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NameNodeServiceStub(object):
    """Servicio para el NameNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/dfs.NameNodeService/Authenticate',
                request_serializer=file__pb2.LoginRequest.SerializeToString,
                response_deserializer=file__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/dfs.NameNodeService/Register',
                request_serializer=file__pb2.RegisterRequest.SerializeToString,
                response_deserializer=file__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.PutFileMetadata = channel.unary_unary(
                '/dfs.NameNodeService/PutFileMetadata',
                request_serializer=file__pb2.FileMetadataRequest.SerializeToString,
                response_deserializer=file__pb2.FileMetadataResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/dfs.NameNodeService/ListFiles',
                request_serializer=file__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=file__pb2.ListFilesResponse.FromString,
                _registered_method=True)
        self.Mkdir = channel.unary_unary(
                '/dfs.NameNodeService/Mkdir',
                request_serializer=file__pb2.MkdirRequest.SerializeToString,
                response_deserializer=file__pb2.MkdirResponse.FromString,
                _registered_method=True)
        self.Rmdir = channel.unary_unary(
                '/dfs.NameNodeService/Rmdir',
                request_serializer=file__pb2.RmdirRequest.SerializeToString,
                response_deserializer=file__pb2.RmdirResponse.FromString,
                _registered_method=True)
        self.DeleteFile = channel.unary_unary(
                '/dfs.NameNodeService/DeleteFile',
                request_serializer=file__pb2.DeleteFileRequest.SerializeToString,
                response_deserializer=file__pb2.DeleteFileResponse.FromString,
                _registered_method=True)


class NameNodeServiceServicer(object):
    """Servicio para el NameNode
    """

    def Authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutFileMetadata(self, request, context):
        """Enviar metadata para asignar DataNodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rmdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=file__pb2.LoginRequest.FromString,
                    response_serializer=file__pb2.LoginResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=file__pb2.RegisterRequest.FromString,
                    response_serializer=file__pb2.RegisterResponse.SerializeToString,
            ),
            'PutFileMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.PutFileMetadata,
                    request_deserializer=file__pb2.FileMetadataRequest.FromString,
                    response_serializer=file__pb2.FileMetadataResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=file__pb2.ListFilesRequest.FromString,
                    response_serializer=file__pb2.ListFilesResponse.SerializeToString,
            ),
            'Mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Mkdir,
                    request_deserializer=file__pb2.MkdirRequest.FromString,
                    response_serializer=file__pb2.MkdirResponse.SerializeToString,
            ),
            'Rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Rmdir,
                    request_deserializer=file__pb2.RmdirRequest.FromString,
                    response_serializer=file__pb2.RmdirResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=file__pb2.DeleteFileRequest.FromString,
                    response_serializer=file__pb2.DeleteFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.NameNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.NameNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NameNodeService(object):
    """Servicio para el NameNode
    """

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/Authenticate',
            file__pb2.LoginRequest.SerializeToString,
            file__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/Register',
            file__pb2.RegisterRequest.SerializeToString,
            file__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutFileMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/PutFileMetadata',
            file__pb2.FileMetadataRequest.SerializeToString,
            file__pb2.FileMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/ListFiles',
            file__pb2.ListFilesRequest.SerializeToString,
            file__pb2.ListFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/Mkdir',
            file__pb2.MkdirRequest.SerializeToString,
            file__pb2.MkdirResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/Rmdir',
            file__pb2.RmdirRequest.SerializeToString,
            file__pb2.RmdirResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/DeleteFile',
            file__pb2.DeleteFileRequest.SerializeToString,
            file__pb2.DeleteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DataNodeServiceStub(object):
    """Servicio para el DataNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreBlock = channel.unary_unary(
                '/dfs.DataNodeService/StoreBlock',
                request_serializer=file__pb2.StoreBlockRequest.SerializeToString,
                response_deserializer=file__pb2.StoreBlockResponse.FromString,
                _registered_method=True)
        self.DeleteBlock = channel.unary_unary(
                '/dfs.DataNodeService/DeleteBlock',
                request_serializer=file__pb2.DeleteBlockRequest.SerializeToString,
                response_deserializer=file__pb2.DeleteBlockResponse.FromString,
                _registered_method=True)


class DataNodeServiceServicer(object):
    """Servicio para el DataNode
    """

    def StoreBlock(self, request, context):
        """Almacenar un bloque en un DataNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreBlock,
                    request_deserializer=file__pb2.StoreBlockRequest.FromString,
                    response_serializer=file__pb2.StoreBlockResponse.SerializeToString,
            ),
            'DeleteBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBlock,
                    request_deserializer=file__pb2.DeleteBlockRequest.FromString,
                    response_serializer=file__pb2.DeleteBlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.DataNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.DataNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataNodeService(object):
    """Servicio para el DataNode
    """

    @staticmethod
    def StoreBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.DataNodeService/StoreBlock',
            file__pb2.StoreBlockRequest.SerializeToString,
            file__pb2.StoreBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.DataNodeService/DeleteBlock',
            file__pb2.DeleteBlockRequest.SerializeToString,
            file__pb2.DeleteBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
