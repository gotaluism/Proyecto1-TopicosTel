syntax = "proto3";

package dfs;

// Servicio para el NameNode
service NameNodeService {
  rpc Authenticate(LoginRequest) returns (LoginResponse);
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc PutFileMetadata(FileMetadataRequest) returns (FileMetadataResponse);  // Enviar metadata para asignar DataNodes
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
  rpc Mkdir(MkdirRequest) returns (MkdirResponse);
  rpc Rmdir(RmdirRequest) returns (RmdirResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc RegisterDataNode(DataNodeRegisterRequest) returns (DataNodeRegisterResponse);
  rpc BlockReport(BlockReportRequest) returns (BlockReportResponse);
}

// Servicio para el DataNode
service DataNodeService {
  rpc StoreBlock(StoreBlockRequest) returns (StoreBlockResponse);  // Almacenar un bloque en un DataNode
  rpc DeleteBlock(DeleteBlockRequest) returns (DeleteBlockResponse);
}


// Mensaje para autenticaci√≥n de usuario
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
}

// Mensaje para registro de nuevos usuarios
message RegisterRequest {
  string username = 1;
  string password = 2;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
}

// Metadata de cada bloque de archivo
message FileBlockMetadata {
  int32 block_number = 1;
  int64 start_byte = 2;
  int64 end_byte = 3;
  string datanode = 4;  // DataNode asignado para este bloque
}


message FileMetadataRequest {
    string filename = 1;
    string username = 2;
    repeated FileBlockMetadata metadata = 3;
    
}

// Respuesta del NameNode con la metadata completa, incluyendo DataNodes asignados
message FileMetadataResponse {
  bool success = 1;
  repeated FileBlockMetadata metadata = 2;  // Lista de bloques y su metadata con DataNodes
}

// Solicitud del cliente para enviar un bloque de datos a un DataNode
message StoreBlockRequest {
  string filename = 1;
  int32 block_number = 2;
  bytes data = 3;
}

// Respuesta del DataNode tras recibir un bloque
message StoreBlockResponse {
  bool success = 1;
  string message = 2;
}


message ListFilesRequest {
    string username = 1;
}

message ListFilesResponse {
    bool success = 1;
    repeated string filenames = 2;
    repeated string directorynames = 3;
    string message = 4;
}

message MkdirRequest {
    string username = 1;
    string directory = 2;
}

message MkdirResponse {
    bool success = 1;
    string message = 2;
}

message RmdirRequest {
    string username = 1;
    string directory = 2;
}

message RmdirResponse {
    bool success = 1;
    string message = 2;
}

message DeleteFileRequest {
    string username = 1;
    string filename = 2;
}

message DeleteFileResponse {
    bool success = 1;
    string message = 2;
}

message DeleteBlockRequest {
    string filename = 1;
}

message DeleteBlockResponse {
    bool success = 1;
    string message = 2;
}

message GetFileRequest {
    string filepath = 1;
}


// Mensaje de solicitud de Heartbeat
message HeartbeatRequest {
    string datanode_name = 1;
    repeated string stored_blocks = 2;  // Nuevo campo para la lista de bloques
}

// Mensaje de respuesta de Heartbeat
message HeartbeatResponse {
    string status = 1;
}

message DataNodeRegisterRequest {
    string datanode_name = 1;
    string ip_address = 2;
    int32 port = 3;
}

message DataNodeRegisterResponse {
    bool success = 1;
    string message = 2;
}

message BlockInfo {
    string block_id = 1;
    int64 size = 2;
    string checksum = 3;
}

message BlockReportRequest {
    string datanode_name = 1;
    repeated BlockInfo blocks = 2;
}

message BlockReportResponse {
    string message = 1;
}


